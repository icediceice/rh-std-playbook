---
# AAP 2.5 Execution Environment Compatible Windows Patching Role
# Optimized for execution environments with comprehensive Windows update management

- name: Display Windows patching information
  ansible.builtin.debug:
    msg:
      - "Starting Windows patching for {{ inventory_hostname }}"
      - "OS Family: {{ ansible_os_family }}"
      - "Windows Version: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      - "Update categories: {{ win_update_categories | join(', ') }}"

- name: Check Windows Update service status
  ansible.windows.win_service_info:
    name: wuauserv
  register: windows_update_service

- name: Ensure Windows Update service is running
  ansible.windows.win_service:
    name: wuauserv
    state: started
    start_mode: auto
  when: windows_update_service.services[0].state != "running"

- name: Search for available Windows updates
  ansible.windows.win_updates:
    category_names: "{{ win_update_categories }}"
    state: searched
  register: available_updates

- name: Display available updates information
  ansible.builtin.debug:
    msg:
      - "Available updates: {{ available_updates.found_update_count | default(0) }}"
      - "Categories: {{ win_update_categories | join(', ') }}"

- name: Install Windows updates
  ansible.windows.win_updates:
    category_names: "{{ win_update_categories }}"
    reboot: false
    log_path: "C:\\Windows\\Temp\\ansible_win_updates.log"
  register: windows_update_result
  when: available_updates.found_update_count > 0

- name: Check for pending Windows reboot
  ansible.windows.win_shell: |
    $RebootPending = $false
    
    # Check Windows Update reboot required
    if (Get-ChildItem "HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired" -ErrorAction SilentlyContinue) {
        $RebootPending = $true
    }
    
    # Check Component Based Servicing
    if (Get-ChildItem "HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending" -ErrorAction SilentlyContinue) {
        $RebootPending = $true
    }
    
    # Check Pending File Rename Operations
    if (Get-ItemProperty "HKLM:SYSTEM\\CurrentControlSet\\Control\\Session Manager" -Name PendingFileRenameOperations -ErrorAction SilentlyContinue) {
        $RebootPending = $true
    }
    
    Write-Output $RebootPending
  register: windows_reboot_check
  changed_when: false

- name: Set reboot required fact
  ansible.builtin.set_fact:
    patching_reboot_required: "{{ 
      (windows_update_result.reboot_required | default(false)) or 
      (windows_reboot_check.stdout | trim | bool) 
    }}"

- name: Display Windows patching results
  ansible.builtin.debug:
    msg:
      - "Windows patching completed for {{ inventory_hostname }}"
      - "Updates installed: {{ windows_update_result.installed_update_count | default(0) }}"
      - "Updates failed: {{ windows_update_result.failed_update_count | default(0) }}"
      - "Reboot required: {{ patching_reboot_required | default(false) }}"
