#!/bin/bash
# PostgreSQL Backup Script for {{ server_hostname }}
# Environment: {{ server_environment }}

BACKUP_DIR="/var/backups/postgresql"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS={{ backup_retention_days | default('30' if server_environment == 'production' else '7') }}
LOG_FILE="$BACKUP_DIR/backup.log"

# Create backup directory if it doesn't exist
mkdir -p $BACKUP_DIR

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> $LOG_FILE
}

log_message "Starting PostgreSQL backup"

# Backup all databases
if sudo -u postgres pg_dumpall -c > $BACKUP_DIR/full-backup-$DATE.sql; then
    log_message "Database dump completed successfully"
else
    log_message "ERROR: Database dump failed"
    exit 1
fi

# Compress the backup
if gzip $BACKUP_DIR/full-backup-$DATE.sql; then
    log_message "Backup compressed: full-backup-$DATE.sql.gz"
else
    log_message "ERROR: Compression failed"
    exit 1
fi

# Remove old backups
find $BACKUP_DIR -name "full-backup-*.sql.gz" -type f -mtime +$RETENTION_DAYS -delete
log_message "Old backups cleaned up (older than $RETENTION_DAYS days)"

# Calculate backup size
BACKUP_SIZE=$(ls -lh $BACKUP_DIR/full-backup-$DATE.sql.gz | awk '{print $5}')
log_message "Backup completed: full-backup-$DATE.sql.gz (Size: $BACKUP_SIZE)"

# Verify backup integrity
if gunzip -t $BACKUP_DIR/full-backup-$DATE.sql.gz 2>/dev/null; then
    log_message "Backup integrity verified"
else
    log_message "ERROR: Backup integrity check failed"
    mail -s "PostgreSQL Backup Failed - {{ server_hostname }}" {{ admin_email }} < $LOG_FILE
    exit 1
fi

# Send success notification for production
{% if server_environment == 'production' %}
echo "PostgreSQL backup completed successfully on {{ server_hostname }}" | \
    mail -s "PostgreSQL Backup Success - {{ server_hostname }}" {{ admin_email }}
{% endif %}

log_message "Backup process completed successfully"