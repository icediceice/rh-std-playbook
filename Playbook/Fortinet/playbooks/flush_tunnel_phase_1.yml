---
- name: Flush VPN Phase 1 Tunnel
  hosts: "{{ target_hosts }}"
  gather_facts: no
  connection: httpapi
  become: no
  vars:
    ansible_network_os: fortinet.fortios.fortios
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
    vpn_name: "{{ vpn_name | default('vpn1') }}"
    vdom: "{{ vdom | default('root') }}"
  tasks:
    - name: Get VPN Phase 1 tunnels for the VPN
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_phase1

    - name: Set list of phase1 tunnels related to the VPN
      set_fact:
        phase1_names: >-
          {{ vpn_phase1.meta.results | selectattr('name', 'search', vpn_name) | map(attribute='name') | list | unique }}
        phase2_names: >-
          {% set phase2_list = [] %}
          {% for phase1 in vpn_phase1.meta.results | selectattr('name', 'search', vpn_name) %}
            {% for proxy in phase1.proxyid | default([]) %}
              {% set _ = phase2_list.append(proxy.p2name) %}
            {% endfor %}
          {% endfor %}
          {{ phase2_list | unique }}

    - name: First flush all Phase 2 tunnels (dependencies)
      fortinet.fortios.fortios_vpn_ipsec_phase2_interface:
        state: "absent"
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        vpn_ipsec_phase2_interface:
          name: "{{ item }}"
      loop: "{{ phase2_names }}"
      register: flush_phase2_result
      ignore_errors: yes

    - name: Then flush all Phase 1 tunnels for the VPN
      fortinet.fortios.fortios_vpn_ipsec_phase1_interface:
        state: "absent"
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        vpn_ipsec_phase1_interface:
          name: "{{ item }}"
      loop: "{{ phase1_names }}"
      register: flush_result

    - name: Set flush operation facts for workflow
      set_fact:
        phase1_found: "{{ phase1_names | length > 0 }}"
        phase2_found: "{{ phase2_names | length > 0 }}"
        phase1_count: "{{ phase1_names | length }}"
        phase2_count: "{{ phase2_names | length }}"
        phase1_flush_successful: "{{ flush_result.results | selectattr('failed', 'equalto', false) | list | length == phase1_names | length }}"
        phase2_flush_successful: "{{ flush_phase2_result.results | selectattr('failed', 'equalto', false) | list | length == phase2_names | length if phase2_names | length > 0 else true }}"

    - name: Show flush operation results
      debug:
        msg:
          - "=============================="
          - "VPN {{ vpn_name }} Complete Flush Results"
          - "=============================="
          - "Phase 2 Tunnels Found: {{ phase2_found }}"
          - "Phase 2 Tunnels Count: {{ phase2_count }}"
          - "Phase 2 Tunnels Flushed: {{ phase2_names | join(', ') if phase2_found else 'None' }}"
          - "Phase 2 Flush Successful: {{ phase2_flush_successful }}"
          - ""
          - "Phase 1 Tunnels Found: {{ phase1_found }}"
          - "Phase 1 Tunnels Count: {{ phase1_count }}"
          - "Phase 1 Tunnels Flushed: {{ phase1_names | join(', ') if phase1_found else 'None' }}"
          - "Phase 1 Flush Successful: {{ phase1_flush_successful }}"
          - ""
          - "Overall Workflow Result: {{ 'SUCCESS' if (phase1_flush_successful and phase2_flush_successful) else 'FAILED' }}"

    - name: Fail task if flush operation failed
      fail:
        msg: "Failed to flush VPN {{ vpn_name }} - Phase 1: {{ phase1_flush_successful }}, Phase 2: {{ phase2_flush_successful }}"
      when: phase1_found and not (phase1_flush_successful and phase2_flush_successful)

    - name: Fail task if no tunnels found to flush
      fail:
        msg: "No Phase 1 tunnels found for VPN {{ vpn_name }} - nothing to flush"
      when: not phase1_found
