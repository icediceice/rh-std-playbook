---
- name: Reset VPN Phase 1 Tunnel Sessions
  hosts: "{{ target_hosts }}"
  gather_facts: no
  connection: httpapi
  become: no
  vars:
    ansible_network_os: fortinet.fortios.fortios
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
    vpn_name: "{{ vpn_name | default('vpn1') }}"
    vdom: "{{ vdom | default('root') }}"
  tasks:
    - name: Get VPN Phase 1 tunnels for the VPN
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_phase1

    - name: Set list of phase1 tunnels related to the VPN
      set_fact:
        phase1_names: >-
          {{ vpn_phase1.meta.results | selectattr('name', 'search', vpn_name) | map(attribute='name') | list | unique }}
        phase2_names: >-
          {% set phase2_list = [] %}
          {% for phase1 in vpn_phase1.meta.results | selectattr('name', 'search', vpn_name) %}
            {% for proxy in phase1.proxyid | default([]) %}
              {% set _ = phase2_list.append(proxy.p2name) %}
            {% endfor %}
          {% endfor %}
          {{ phase2_list | unique }}

    - name: Reset IKE gateway for VPN tunnel (keeps config)
      fortinet.fortios.fortios_monitor:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn-ipsec_reset-ike-gateway'
        params:
          gateway: "{{ item }}"
      loop: "{{ phase1_names }}"
      register: reset_result
      ignore_errors: yes

    - name: Wait for tunnel reset to complete
      pause:
        seconds: 5

    - name: Check tunnel status after reset
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_status_after_reset

    - name: Set reset operation facts for workflow
      set_fact:
        tunnels_found: "{{ phase1_names | length > 0 }}"
        tunnels_count: "{{ phase1_names | length }}"
        reset_successful: "{{ reset_result.results | selectattr('failed', 'equalto', false) | list | length == phase1_names | length }}"
        vpn_status_after: >-
          {%- set phase1_list = (vpn_status_after_reset.meta.results | default([]) | selectattr('name', 'search', vpn_name) | list) -%}
          {%- if phase1_list -%}
            {%- set phase1 = phase1_list[0] -%}
            {{- phase1.proxyid[0].status if phase1.proxyid and phase1.proxyid|length > 0 else 'unknown' -}}
          {%- else -%}
            not_found
          {%- endif -%}

    - name: Show reset operation results
      debug:
        msg:
          - "=============================="
          - "VPN {{ vpn_name }} Reset Results"
          - "=============================="
          - "Tunnels Found: {{ tunnels_found }}"
          - "Tunnels Count: {{ tunnels_count }}"
          - "Tunnels Reset: {{ phase1_names | join(', ') if tunnels_found else 'None' }}"
          - "Reset Successful: {{ reset_successful }}"
          - ""
          - "Status After Reset: {{ vpn_status_after | upper }}"
          - "Workflow Result: {{ 'SUCCESS' if reset_successful else 'FAILED' }}"
          - ""
          - "Note: VPN configuration preserved, only sessions were reset"

    - name: Fail task if reset operation failed
      fail:
        msg: "Failed to reset VPN {{ vpn_name }} tunnel sessions"
      when: tunnels_found and not reset_successful

    - name: Fail task if no tunnels found to reset
      fail:
        msg: "No Phase 1 tunnels found for VPN {{ vpn_name }} - nothing to reset"
      when: not tunnels_found
