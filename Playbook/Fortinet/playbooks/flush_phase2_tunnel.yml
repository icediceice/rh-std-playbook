---
- name: Reset VPN Phase 2 Tunnel Sessions
  hosts: "{{ target_hosts }}"
  gather_facts: no
  connection: httpapi
  become: no
  vars:
    ansible_network_os: fortinet.fortios.fortios
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
  tasks:
    - name: Get VPN Phase 2 tunnels for the VPN
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom | default('root') }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_phase2

    - name: Set list of phase2 tunnels related to the VPN
      set_fact:
        phase2_names: >-
          {{ vpn_phase2.meta.results | selectattr('name', 'search', vpn_name | default('vpn1')) | map(attribute='name') | list | unique }}

    - name: Show Phase 2 tunnel details for reset
      debug:
        msg:
          - "Phase 1 Name: {{ vpn_name | default('vpn1') }}"
          - "Phase 2 Names: {{ phase2_names }}"
          - "Phase 2 Details from proxyid:"
          - "{{ vpn_phase2.meta.results | selectattr('name', 'search', vpn_name | default('vpn1')) | map(attribute='proxyid') | flatten | list }}"

    - name: Bring down Phase 2 tunnels using proxyid details
      fortinet.fortios.fortios_monitor:
        vdom: "{{ vdom | default('root') }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'tunnel_down.vpn.ipsec'
        params:
          p1name: "{{ vpn_name | default('vpn1') }}"
          p2name: "{{ item.p2name }}"
          p2serial: "{{ item.p2serial }}"
      loop: "{{ vpn_phase2.meta.results | selectattr('name', 'search', vpn_name | default('vpn1')) | map(attribute='proxyid') | flatten | list }}"
      register: down_result
      ignore_errors: yes

    - name: Wait before bringing tunnels back up
      pause:
        seconds: 3

    - name: Bring up Phase 2 tunnels to re-establish
      fortinet.fortios.fortios_monitor:
        vdom: "{{ vdom | default('root') }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'tunnel_up.vpn.ipsec'
        params:
          p1name: "{{ vpn_name | default('vpn1') }}"
          p2name: "{{ item.p2name }}"
          p2serial: "{{ item.p2serial }}"
      loop: "{{ vpn_phase2.meta.results | selectattr('name', 'search', vpn_name | default('vpn1')) | map(attribute='proxyid') | flatten | list }}"
      register: up_result
      ignore_errors: yes

    - name: Wait for tunnel reset to complete
      pause:
        seconds: 5

    - name: Wait for Phase 2 tunnels to potentially re-establish naturally
      pause:
        seconds: "{{ tunnel_wait_time | default(10) }}"
      when: force_tunnel_online | default(true) | bool

    - name: Check Phase 2 tunnel status after natural recovery period
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom | default('root') }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_status_after_wait
      when: force_tunnel_online | default(true) | bool

    - name: Set Phase 2 tunnel status after waiting period
      set_fact:
        vpn_currently_up: >-
          {%- set phase2_list = (vpn_status_after_wait.meta.results | default([]) | selectattr('name', 'search', vpn_name | default('vpn1')) | list) -%}
          {%- if phase2_list -%}
            {%- set phase2 = phase2_list[0] -%}
            {%- set status = phase2.proxyid[0].status if phase2.proxyid and phase2.proxyid|length > 0 else 'unknown' -%}
            {{- (status == 'up') | bool -}}
          {%- else -%}
            {{- false -}}
          {%- endif -%}
      when: force_tunnel_online | default(true) | bool

    - name: Debug Phase 2 tunnel recovery results
      debug:
        msg:
          - "Natural tunnel recovery feature: {{ 'ENABLED' if force_tunnel_online | default(true) | bool else 'DISABLED' }}"
          - "Wait time for natural recovery: {{ tunnel_wait_time | default(10) }} seconds"
          - "Phase 2 tunnel recovery result: {{ 'SUCCESS' if vpn_currently_up | default(false) else 'WAITING' if force_tunnel_online | default(true) | bool else 'SKIPPED' }}"
          - "Current Phase 2 tunnel status: {{ vpn_status_after_wait.meta.results | selectattr('name', 'search', vpn_name | default('vpn1')) | map(attribute='proxyid') | map('first') | map(attribute='status') | first | default('unknown') | upper if force_tunnel_online | default(true) | bool else 'NOT_CHECKED' }}"
          - "Note: Phase 2 tunnels often re-establish automatically after reset. If still down, check Phase 1 and network connectivity."

    - name: Final tunnel status check
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom | default('root') }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_status_after_reset

    - name: Set reset operation facts for workflow
      set_fact:
        tunnels_found: "{{ phase2_names | length > 0 }}"
        tunnels_count: "{{ phase2_names | length }}"
        flush_successful: "{{ (down_result.results | selectattr('failed', 'equalto', false) | list | length == down_result.results | length) and (up_result.results | selectattr('failed', 'equalto', false) | list | length == up_result.results | length) }}"
        vpn_status_after: >-
          {%- set phase2_list = (vpn_status_after_reset.meta.results | default([]) | selectattr('name', 'search', vpn_name | default('vpn1')) | list) -%}
          {%- if phase2_list -%}
            {%- set phase2 = phase2_list[0] -%}
            {{- phase2.proxyid[0].status if phase2.proxyid and phase2.proxyid|length > 0 else 'unknown' -}}
          {%- else -%}
            not_found
          {%- endif -%}
        vpn_up_after_reset: >-
          {%- set phase2_list = (vpn_status_after_reset.meta.results | default([]) | selectattr('name', 'search', vpn_name | default('vpn1')) | list) -%}
          {%- if phase2_list -%}
            {%- set phase2 = phase2_list[0] -%}
            {%- set status = phase2.proxyid[0].status if phase2.proxyid and phase2.proxyid|length > 0 else 'unknown' -%}
            {{- (status == 'up') | bool -}}
          {%- else -%}
            {{- false -}}
          {%- endif -%}

    - name: Show reset operation results
      debug:
        msg:
          - "=============================="
          - "VPN {{ vpn_name | default('vpn1') }} Phase 2 Reset Results"
          - "=============================="
          - "Tunnels Found: {{ tunnels_found }}"
          - "Tunnels Count: {{ tunnels_count }}"
          - "Tunnels Reset: {{ phase2_names | join(', ') if tunnels_found else 'None' }}"
          - "Flush Successful: {{ flush_successful }}"
          - ""
          - "Status After Flush: {{ vpn_status_after | upper }}"
          - "Reset Operation: {{ 'SUCCESS' if flush_successful else 'FAILED' }}"
          - "Workflow Result: {{ 'SUCCESS' if (flush_successful and vpn_up_after_reset) else 'FAILED' }}"
          - ""
          - "Note: VPN configuration preserved, only sessions were reset"

    - name: Fail task if VPN is still down after Phase 2 reset
      fail:
        msg: "VPN {{ vpn_name | default('vpn1') }} is still {{ vpn_status_after | upper }} after Phase 2 reset - workflow failed"
      when: tunnels_found and flush_successful and not vpn_up_after_reset

    - name: Fail task if flush operation failed
      fail:
        msg: "Failed to flush VPN {{ vpn_name | default('vpn1') }} Phase 2 tunnel sessions"
      when: tunnels_found and not flush_successful

    - name: Fail task if no tunnels found to reset
      fail:
        msg: "No Phase 2 tunnels found for VPN {{ vpn_name | default('vpn1') }} - nothing to reset"
      when: not tunnels_found
