---
- name: Reset VPN Phase 2 Tunnel Sessions
  hosts: "{{ target_hosts }}"
  gather_facts: no
  connection: httpapi
  become: no
  vars:
    ansible_network_os: fortinet.fortios.fortios
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
    vpn_name: "{{ vpn_name | default('vpn1') }}"
    vdom: "{{ vdom | default('root') }}"
  tasks:
    - name: Get VPN Phase 2 tunnels for the VPN
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_phase2

    - name: Set list of phase2 tunnels related to the VPN
      set_fact:
        phase2_names: >-
          {{ vpn_phase2.meta.results | selectattr('name', 'search', vpn_name) | map(attribute='name') | list | unique }}

    - name: Get Phase 2 details for proper reset
      set_fact:
        phase2_details: []

    - name: Build Phase 2 details list
      set_fact:
        phase2_details: >-
          {{ phase2_details + [{'p1name': phase1.name, 'p2name': proxy.p2name, 'p2serial': proxy.p2serial}] }}
      loop: >-
        {% set result = [] %}
        {% for phase1 in vpn_phase2.meta.results | selectattr('name', 'search', vpn_name) %}
          {% for proxy in phase1.proxyid | default([]) %}
            {% set _ = result.append({'phase1': phase1, 'proxy': proxy}) %}
          {% endfor %}
        {% endfor %}
        {{ result }}
      vars:
        phase1: "{{ item.phase1 }}"
        proxy: "{{ item.proxy }}"

    - name: Bring down Phase 2 tunnels first
      fortinet.fortios.fortios_monitor:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'tunnel_down.vpn.ipsec'
        params:
          p1name: "{{ item.p1name }}"
          p2name: "{{ item.p2name }}"
          p2serial: "{{ item.p2serial }}"
      loop: "{{ phase2_details }}"
      register: down_result
      ignore_errors: yes

    - name: Wait before bringing tunnels back up
      pause:
        seconds: 3

    - name: Bring up Phase 2 tunnels to re-establish
      fortinet.fortios.fortios_monitor:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'tunnel_up.vpn.ipsec'
        params:
          p1name: "{{ item.p1name }}"
          p2name: "{{ item.p2name }}"
          p2serial: "{{ item.p2serial }}"
      loop: "{{ phase2_details }}"
      register: up_result
      ignore_errors: yes

    - name: Wait for tunnel reset to complete
      pause:
        seconds: 5

    - name: Check tunnel status after reset
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_status_after_reset

    - name: Set reset operation facts for workflow
      set_fact:
        tunnels_found: "{{ phase2_names | length > 0 }}"
        tunnels_count: "{{ phase2_names | length }}"
        flush_successful: "{{ (down_result.results | selectattr('failed', 'equalto', false) | list | length == phase2_details | length) and (up_result.results | selectattr('failed', 'equalto', false) | list | length == phase2_details | length) }}"
        vpn_status_after: >-
          {%- set phase2_list = (vpn_status_after_reset.meta.results | default([]) | selectattr('name', 'search', vpn_name) | list) -%}
          {%- if phase2_list -%}
            {%- set phase2 = phase2_list[0] -%}
            {{- phase2.proxyid[0].status if phase2.proxyid and phase2.proxyid|length > 0 else 'unknown' -}}
          {%- else -%}
            not_found
          {%- endif -%}

    - name: Show reset operation results
      debug:
        msg:
          - "=============================="
          - "VPN {{ vpn_name }} Phase 2 Reset Results"
          - "=============================="
          - "Tunnels Found: {{ tunnels_found }}"
          - "Tunnels Count: {{ tunnels_count }}"
          - "Tunnels Reset: {{ phase2_names | join(', ') if tunnels_found else 'None' }}"
          - "Flush Successful: {{ flush_successful }}"
          - ""
          - "Status After Flush: {{ vpn_status_after | upper }}"
          - "Workflow Result: {{ 'SUCCESS' if flush_successful else 'FAILED' }}"
          - ""
          - "Note: VPN configuration preserved, only sessions were reset"

    - name: Fail task if flush operation failed
      fail:
        msg: "Failed to flush VPN {{ vpn_name }} Phase 2 tunnel sessions"
      when: tunnels_found and not flush_successful

    - name: Fail task if no tunnels found to reset
      fail:
        msg: "No Phase 2 tunnels found for VPN {{ vpn_name }} - nothing to reset"
      when: not tunnels_found
