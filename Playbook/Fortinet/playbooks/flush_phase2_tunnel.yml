---
- name: Flush VPN Phase 2 Tunnel
  hosts: "{{ target_hosts }}"
  gather_facts: no
  connection: httpapi
  become: no
  vars:
    ansible_network_os: fortinet.fortios.fortios
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
    vpn_name: "{{ vpn_name | default('vpn1') }}"
    vdom: "{{ vdom | default('root') }}"
  tasks:
    - name: Get VPN Phase 2 tunnels for the VPN
      fortinet.fortios.fortios_monitor_fact:
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        selector: 'vpn_ipsec'
      register: vpn_phase2

    - name: Set list of phase2 tunnels related to the VPN
      set_fact:
        phase2_names: >-
          {{ vpn_phase2.meta.results | selectattr('name', 'search', vpn_name) | map(attribute='name') | list | unique }}

    - name: Flush all Phase 2 tunnels for the VPN
      fortinet.fortios.fortios_vpn_ipsec_phase2_interface:
        state: "absent"
        vdom: "{{ vdom }}"
        access_token: "{{ ansible_password | default(fortinet_api_token) }}"
        name: "{{ item }}"
      loop: "{{ phase2_names }}"
      register: flush_result

    - name: Set flush operation facts for workflow
      set_fact:
        tunnels_found: "{{ phase2_names | length > 0 }}"
        tunnels_count: "{{ phase2_names | length }}"
        flush_successful: "{{ flush_result.results | selectattr('failed', 'equalto', false) | list | length == phase2_names | length }}"

    - name: Show flush operation results
      debug:
        msg:
          - "=============================="
          - "VPN {{ vpn_name }} Phase 2 Flush Results"
          - "=============================="
          - "Tunnels Found: {{ tunnels_found }}"
          - "Tunnels Count: {{ tunnels_count }}"
          - "Tunnels Flushed: {{ phase2_names | join(', ') if tunnels_found else 'None' }}"
          - "Flush Successful: {{ flush_successful }}"
          - "Workflow Result: {{ 'SUCCESS' if flush_successful else 'FAILED' }}"

    - name: Fail task if flush operation failed
      fail:
        msg: "Failed to flush one or more Phase 2 tunnels for VPN {{ vpn_name }}"
      when: tunnels_found and not flush_successful

    - name: Fail task if no tunnels found to flush
      fail:
        msg: "No Phase 2 tunnels found for VPN {{ vpn_name }} - nothing to flush"
      when: not tunnels_found
