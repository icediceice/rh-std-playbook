---
# AIX Memory Threshold Check Playbook
# Checks memory/paging space usage against predefined thresholds
# Sets workflow variables for AAP to trigger memory scaling if needed
# Compatible with AAP 2.5 workflow orchestration

- name: AIX Memory Threshold Check
  hosts: "{{ target_hosts | default('aix') }}"
  gather_facts: false
  become: true
  
  vars:
    # Playbook identification for AAP
    playbook_name: "AIX Memory Threshold Check"
    playbook_version: "3.0"
    
    # AAP Job Information (automatically injected by AAP)
    aap_job_template: "{{ tower_job_template_name | default('N/A') }}"
    aap_job_id: "{{ tower_job_id | default('N/A') }}"
    aap_user: "{{ tower_user_name | default('N/A') }}"
    aap_inventory: "{{ tower_inventory_name | default('N/A') }}"
    
    # Change tracking for AAP (avoid recursive definition)
    memory_check_reason: "{{ change_reason | default('Automated memory threshold monitoring') }}"
    memory_check_ticket: "{{ change_ticket | default('') }}"
    
    # Memory monitoring thresholds - can be overridden via survey
    paging_space_threshold: "{{ paging_threshold | default(10) }}"  # Percentage of paging space used
    real_memory_threshold: "{{ memory_threshold | default(85) }}"   # Percentage of real memory used
    memory_scale_increment_mb: "{{ memory_add_mb | default(512) }}" # MB to add when scaling
    
    # HMC Configuration (required for memory scaling)
    hmc_host: "{{ hmc_server | default('') }}"
    hmc_user: "{{ hmc_username | default('') }}"
    lpar_name: "{{ target_lpar_name | default('') }}"
    
    # Directory paths
    aix_log_dir: "/bigc/log"
    
  pre_tasks:
    - name: Gather minimal system facts
      ansible.builtin.raw: |
        echo "HOSTNAME=$(hostname)"
        echo "OS=$(uname -s)"
        echo "DATE=$(date)"
      register: system_info
      changed_when: false
      tags: always
    
    - name: Display memory threshold check information
      ansible.builtin.debug:
        msg: |
          =====================================
          AIX Memory Threshold Check
          =====================================
          Version: {{ playbook_version }}
          Target Hosts: {{ target_hosts | default('aix') }}
          AAP Job Template: {{ aap_job_template }}
          AAP Job ID: {{ aap_job_id }}
          AAP User: {{ aap_user }}
          Change Reason: {{ memory_check_reason }}
          Change Ticket: {{ memory_check_ticket }}
          Paging Space Threshold: {{ paging_space_threshold }}%
          Real Memory Threshold: {{ real_memory_threshold }}%
          Memory Increment: {{ memory_scale_increment_mb }}MB
          HMC Host: {{ hmc_host | default('Not configured') }}
          =====================================
      tags: always
    
    - name: Validate target hosts
      ansible.builtin.fail:
        msg: "No valid AIX hosts found in inventory"
      when: "'OS=AIX' not in system_info.stdout"
      tags: always
    
    - name: Ensure log directory exists
      ansible.builtin.raw: |
        [ -d "{{ aix_log_dir }}" ] || mkdir -p "{{ aix_log_dir }}"
        chmod 755 "{{ aix_log_dir }}"
      changed_when: false
      tags: always

  tasks:
    - name: Check memory and paging space against thresholds
      ansible.builtin.raw: |
        HOSTNAME=$(hostname)
        LOG_FILE="{{ aix_log_dir }}/memory_threshold_check_${HOSTNAME}_$(date +%Y%m%d_%H%M%S).log"
        RESULTS_FILE="{{ aix_log_dir }}/memory_threshold_results_${HOSTNAME}_$(date +%Y%m%d_%H%M%S).txt"
        
        echo "=============================== MEMORY THRESHOLD CHECK ===============================" > "$LOG_FILE"
        echo "Date: $(date)" >> "$LOG_FILE"
        echo "Hostname: $HOSTNAME" >> "$LOG_FILE"
        echo "AAP Job ID: {{ aap_job_id }}" >> "$LOG_FILE"
        echo "Change Ticket: {{ memory_check_ticket }}" >> "$LOG_FILE"
        echo "Paging Space Threshold: {{ paging_space_threshold }}%" >> "$LOG_FILE"
        echo "Real Memory Threshold: {{ real_memory_threshold }}%" >> "$LOG_FILE"
        echo "Memory Scale Increment: {{ memory_scale_increment_mb }}MB" >> "$LOG_FILE"
        echo "" >> "$LOG_FILE"
        
        # Initialize results
        SCALING_NEEDED=NO
        PAGING_THRESHOLD_EXCEEDED=NO
        MEMORY_THRESHOLD_EXCEEDED=NO
        CURRENT_MEMORY_MB=0
        CURRENT_PAGING_MB=0
        RECOMMENDED_MEMORY_MB=0
        
        # Check paging space usage
        echo "Checking paging space usage..." >> "$LOG_FILE"
        
        if command -v lsps >/dev/null 2>&1; then
          # Get paging space information
          PAGING_INFO=$(lsps -a 2>/dev/null)
          echo "Paging space information:" >> "$LOG_FILE"
          echo "$PAGING_INFO" >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          
          # Calculate total paging space usage percentage
          PAGING_USAGE_PCT=$(echo "$PAGING_INFO" | awk 'NR>1 {
            gsub(/%/, "", $4)
            if ($4 ~ /^[0-9]+$/) {
              total_usage += $4
              count++
            }
          } END {
            if (count > 0) print int(total_usage / count)
            else print 0
          }')
          
          echo "Average paging space usage: ${PAGING_USAGE_PCT}%" >> "$LOG_FILE"
          
          # Check against threshold
          if [ "$PAGING_USAGE_PCT" -gt "{{ paging_space_threshold }}" ] 2>/dev/null; then
            echo "⚠️  PAGING THRESHOLD EXCEEDED: ${PAGING_USAGE_PCT}% > {{ paging_space_threshold }}%" >> "$LOG_FILE"
            PAGING_THRESHOLD_EXCEEDED=YES
            SCALING_NEEDED=YES
          else
            echo "✅ Paging space usage within threshold: ${PAGING_USAGE_PCT}% <= {{ paging_space_threshold }}%" >> "$LOG_FILE"
          fi
        else
          echo "lsps command not available" >> "$LOG_FILE"
        fi
        
        echo "" >> "$LOG_FILE"
        
        # Check real memory usage
        echo "Checking real memory usage..." >> "$LOG_FILE"
        
        if command -v svmon >/dev/null 2>&1; then
          # Get memory information using svmon
          MEMORY_INFO=$(svmon -G 2>/dev/null)
          echo "Memory information (svmon -G):" >> "$LOG_FILE"
          echo "$MEMORY_INFO" >> "$LOG_FILE"
          echo "" >> "$LOG_FILE"
          
          # Parse memory usage
          MEMORY_TOTAL=$(echo "$MEMORY_INFO" | awk '/memory/ {print $2}' | head -1)
          MEMORY_USED=$(echo "$MEMORY_INFO" | awk '/memory/ {print $3}' | head -1)
          
          if [ -n "$MEMORY_TOTAL" ] && [ -n "$MEMORY_USED" ] && [ "$MEMORY_TOTAL" -gt 0 ] 2>/dev/null; then
            # Convert from 4KB pages to MB (divide by 256)
            MEMORY_TOTAL_MB=$((MEMORY_TOTAL / 256))
            MEMORY_USED_MB=$((MEMORY_USED / 256))
            MEMORY_USAGE_PCT=$((MEMORY_USED * 100 / MEMORY_TOTAL))
            
            CURRENT_MEMORY_MB=$MEMORY_TOTAL_MB
            
            echo "Memory usage: ${MEMORY_USED_MB}MB / ${MEMORY_TOTAL_MB}MB (${MEMORY_USAGE_PCT}%)" >> "$LOG_FILE"
            
            # Check against threshold
            if [ "$MEMORY_USAGE_PCT" -gt "{{ real_memory_threshold }}" ] 2>/dev/null; then
              echo "⚠️  MEMORY THRESHOLD EXCEEDED: ${MEMORY_USAGE_PCT}% > {{ real_memory_threshold }}%" >> "$LOG_FILE"
              MEMORY_THRESHOLD_EXCEEDED=YES
              SCALING_NEEDED=YES
            else
              echo "✅ Memory usage within threshold: ${MEMORY_USAGE_PCT}% <= {{ real_memory_threshold }}%" >> "$LOG_FILE"
            fi
          else
            echo "Unable to parse memory information from svmon" >> "$LOG_FILE"
          fi
        else
          echo "svmon command not available" >> "$LOG_FILE"
        fi
        
        echo "" >> "$LOG_FILE"
        
        # Alternative memory check using prtconf
        echo "Cross-checking with prtconf..." >> "$LOG_FILE"
        
        if command -v prtconf >/dev/null 2>&1; then
          PRTCONF_MEMORY=$(prtconf | grep "Memory Size" | awk '{print $3}' 2>/dev/null)
          if [ -n "$PRTCONF_MEMORY" ]; then
            echo "Total memory from prtconf: ${PRTCONF_MEMORY}MB" >> "$LOG_FILE"
            if [ "$CURRENT_MEMORY_MB" -eq 0 ]; then
              CURRENT_MEMORY_MB=$PRTCONF_MEMORY
            fi
          fi
        fi
        
        # Get current LPAR memory configuration if lparstat available
        echo "" >> "$LOG_FILE"
        echo "Checking LPAR memory configuration..." >> "$LOG_FILE"
        
        if command -v lparstat >/dev/null 2>&1; then
          echo "LPAR memory statistics:" >> "$LOG_FILE"
          lparstat -i | grep -i memory >> "$LOG_FILE" 2>/dev/null || echo "No memory info in lparstat" >> "$LOG_FILE"
        fi
        
        # Calculate recommended memory if scaling is needed
        if [ "$SCALING_NEEDED" = "YES" ] && [ "$CURRENT_MEMORY_MB" -gt 0 ]; then
          RECOMMENDED_MEMORY_MB=$((CURRENT_MEMORY_MB + {{ memory_scale_increment_mb }}))
          echo "" >> "$LOG_FILE"
          echo "📈 Memory Scaling Recommendation:" >> "$LOG_FILE"
          echo "  Current Memory: ${CURRENT_MEMORY_MB}MB" >> "$LOG_FILE"
          echo "  Recommended Memory: ${RECOMMENDED_MEMORY_MB}MB (add {{ memory_scale_increment_mb }}MB)" >> "$LOG_FILE"
        fi
        
        # Generate summary
        echo "" >> "$LOG_FILE"
        echo "=============================== SUMMARY ===============================" >> "$LOG_FILE"
        echo "Current Memory: ${CURRENT_MEMORY_MB}MB" >> "$LOG_FILE"
        echo "Paging threshold exceeded: $PAGING_THRESHOLD_EXCEEDED" >> "$LOG_FILE"
        echo "Memory threshold exceeded: $MEMORY_THRESHOLD_EXCEEDED" >> "$LOG_FILE"
        echo "Memory scaling needed: $SCALING_NEEDED" >> "$LOG_FILE"
        echo "Recommended memory: ${RECOMMENDED_MEMORY_MB}MB" >> "$LOG_FILE"
        echo "HMC Host configured: {{ 'YES' if hmc_host else 'NO' }}" >> "$LOG_FILE"
        echo "" >> "$LOG_FILE"
        echo "Completed at: $(date)" >> "$LOG_FILE"
        
        # Create results file for workflow
        cat > "$RESULTS_FILE" << EOF
        SCALING_NEEDED=$SCALING_NEEDED
        PAGING_THRESHOLD_EXCEEDED=$PAGING_THRESHOLD_EXCEEDED
        MEMORY_THRESHOLD_EXCEEDED=$MEMORY_THRESHOLD_EXCEEDED
        CURRENT_MEMORY_MB=$CURRENT_MEMORY_MB
        RECOMMENDED_MEMORY_MB=$RECOMMENDED_MEMORY_MB
        MEMORY_SCALE_INCREMENT={{ memory_scale_increment_mb }}
        HOSTNAME=$HOSTNAME
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        AAP_JOB_ID={{ aap_job_id }}
        CHANGE_TICKET={{ memory_check_ticket }}
        HMC_HOST={{ hmc_host }}
        LPAR_NAME={{ lpar_name }}
        EOF
        
        # Output for Ansible
        echo "SCALING_NEEDED=$SCALING_NEEDED"
        echo "PAGING_THRESHOLD_EXCEEDED=$PAGING_THRESHOLD_EXCEEDED"
        echo "MEMORY_THRESHOLD_EXCEEDED=$MEMORY_THRESHOLD_EXCEEDED"
        echo "CURRENT_MEMORY_MB=$CURRENT_MEMORY_MB"
        echo "RECOMMENDED_MEMORY_MB=$RECOMMENDED_MEMORY_MB"
        echo "LOG_FILE=$LOG_FILE"
        echo "RESULTS_FILE=$RESULTS_FILE"
      register: memory_threshold_check_results
      changed_when: false
      tags:
        - threshold_check
        - memory
    
    - name: Parse memory threshold check results
      ansible.builtin.set_fact:
        memory_scaling_needed: "{{ memory_threshold_check_results.stdout_lines | select('match', '^SCALING_NEEDED=') | first | regex_replace('SCALING_NEEDED=', '') }}"
        memory_paging_exceeded: "{{ memory_threshold_check_results.stdout_lines | select('match', '^PAGING_THRESHOLD_EXCEEDED=') | first | regex_replace('PAGING_THRESHOLD_EXCEEDED=', '') }}"
        memory_mem_exceeded: "{{ memory_threshold_check_results.stdout_lines | select('match', '^MEMORY_THRESHOLD_EXCEEDED=') | first | regex_replace('MEMORY_THRESHOLD_EXCEEDED=', '') }}"
        memory_current_mb: "{{ memory_threshold_check_results.stdout_lines | select('match', '^CURRENT_MEMORY_MB=') | first | regex_replace('CURRENT_MEMORY_MB=', '') }}"
        memory_recommended_mb: "{{ memory_threshold_check_results.stdout_lines | select('match', '^RECOMMENDED_MEMORY_MB=') | first | regex_replace('RECOMMENDED_MEMORY_MB=', '') }}"
        memory_log_file: "{{ memory_threshold_check_results.stdout_lines | select('match', '^LOG_FILE=') | first | regex_replace('LOG_FILE=', '') }}"
        memory_results_file: "{{ memory_threshold_check_results.stdout_lines | select('match', '^RESULTS_FILE=') | first | regex_replace('RESULTS_FILE=', '') }}"
      tags: threshold_check
    
    # Set workflow variables for AAP
    - name: Set AAP workflow variables for memory scaling
      ansible.builtin.set_stats:
        data:
          memory_scaling_needed: "{{ memory_scaling_needed }}"
          memory_paging_threshold_exceeded: "{{ memory_paging_exceeded }}"
          memory_threshold_exceeded: "{{ memory_mem_exceeded }}"
          memory_current_mb: "{{ memory_current_mb }}"
          memory_recommended_mb: "{{ memory_recommended_mb }}"
          memory_scale_increment_mb: "{{ memory_scale_increment_mb }}"
          memory_check_completed: "YES"
          memory_log_file: "{{ memory_log_file }}"
          memory_results_file: "{{ memory_results_file }}"
          memory_hostname: "{{ system_info.stdout_lines | select('match', '^HOSTNAME=') | first | regex_replace('HOSTNAME=', '') | default('unknown') }}"
          memory_check_timestamp: "{{ system_info.stdout_lines | select('match', '^DATE=') | first | regex_replace('DATE=', '') | default('N/A') }}"
          memory_hmc_host: "{{ hmc_host }}"
          memory_lpar_name: "{{ lpar_name }}"
        aggregate: false
      tags: threshold_check

    - name: Fail playbook if memory thresholds are breached (for workflow decision)
      ansible.builtin.fail:
        msg: |
          🚨 MEMORY THRESHOLD BREACH DETECTED - SCALING REQUIRED 🚨
          
          Threshold Violations:
          - Paging Space Threshold: {{ '❌ EXCEEDED' if memory_paging_exceeded == 'YES' else '✅ OK' }}
          - Real Memory Threshold: {{ '❌ EXCEEDED' if memory_mem_exceeded == 'YES' else '✅ OK' }}
          
          Current Configuration:
          - Current Memory: {{ memory_current_mb }}MB
          - Recommended Memory: {{ memory_recommended_mb }}MB
          - Scale Increment: {{ memory_scale_increment_mb }}MB
          
          This failure triggers the workflow to execute memory scaling.
          Log File: {{ memory_log_file }}
          Results File: {{ memory_results_file }}
      when: 
        - memory_scaling_needed is defined
        - memory_scaling_needed == 'YES'
        - fail_on_threshold_breach | default(true) | bool
      tags: 
        - threshold_check
        - workflow_decision

  post_tasks:
    - name: Display memory threshold check summary
      ansible.builtin.debug:
        msg: |
          =====================================
          Memory Threshold Check Summary
          =====================================
          Host: {{ system_info.stdout_lines | select('match', '^HOSTNAME=') | first | regex_replace('HOSTNAME=', '') | default('unknown') }}
          Execution Time: {{ system_info.stdout_lines | select('match', '^DATE=') | first | regex_replace('DATE=', '') | default('N/A') }}
          Current Memory: {{ memory_current_mb | default('Unknown') }}MB
          
          Threshold Status:
          - Paging Space Threshold ({{ paging_space_threshold }}%): {{ '❌ EXCEEDED' if memory_paging_exceeded == 'YES' else '✅ OK' }}
          - Real Memory Threshold ({{ real_memory_threshold }}%): {{ '❌ EXCEEDED' if memory_mem_exceeded == 'YES' else '✅ OK' }}
          
          Memory Scaling Needed: {{ memory_scaling_needed | default('NO') }}
          
          {% if memory_scaling_needed == 'YES' %}
          🚨 ACTION REQUIRED: Memory scaling needed!
          
          Scaling Recommendation:
          - Current Memory: {{ memory_current_mb }}MB
          - Recommended Memory: {{ memory_recommended_mb }}MB
          - Memory to Add: {{ memory_scale_increment_mb }}MB
          
          HMC Configuration:
          - HMC Host: {{ hmc_host | default('Not configured') }}
          - LPAR Name: {{ lpar_name | default('Not configured') }}
          
          {% if not hmc_host or not lpar_name %}
          ⚠️  WARNING: HMC configuration incomplete. Memory scaling may fail.
          {% endif %}
          
          Next Step: AAP workflow should trigger memory scaling playbook
          {% else %}
          ✅ Memory resources are within acceptable thresholds
          {% endif %}
          
          Log File: {{ memory_log_file | default('N/A') }}
          Results File: {{ memory_results_file | default('N/A') }}
          =====================================
      tags: always
    
    - name: Send memory threshold alert notification
      ansible.builtin.raw: |
        if [ -n "{{ alert_emails | default('') }}" ] && [ -n "{{ smtp_host | default('') }}" ] && [ "{{ memory_scaling_needed | default('NO') }}" = "YES" ]; then
          SUBJECT="🚨 AIX Memory Threshold Alert - {{ system_info.stdout_lines | select('match', '^HOSTNAME=') | first | regex_replace('HOSTNAME=', '') | default('unknown') }}"
          
          if command -v mail >/dev/null 2>&1; then
            cat "{{ memory_log_file | default('/dev/null') }}" | mail -s "$SUBJECT" "{{ alert_emails | join(',') }}" 2>/dev/null || echo "Failed to send alert email"
            echo "Memory threshold alert email sent to: {{ alert_emails | join(',') }}"
          else
            echo "Mail command not available - skipping email notification"
          fi
        else
          echo "No alert needed or email not configured"
        fi
      when: 
        - memory_scaling_needed is defined
        - memory_scaling_needed == 'YES'
        - alert_emails is defined
        - send_threshold_alerts | default(true) | bool
      failed_when: false
      tags: always