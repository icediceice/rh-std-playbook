---
# Main tasks for CPU management using direct SSH commands

- name: Ensure log directory exists
  ansible.builtin.raw: |
    [ -d "{{ aix_log_dir }}" ] || mkdir -p "{{ aix_log_dir }}"
    chmod 755 "{{ aix_log_dir }}"
  changed_when: false
  tags:
    - cpu
    - setup

- name: Get current CPU load and system info
  ansible.builtin.raw: |
    # Get current load average (15-minute)
    LOAD_AVG=$(uptime | awk '{print $12}' | tr -d ',' 2>/dev/null || echo "0")
    
    # Get current virtual CPU count
    CPU_COUNT=$(lparstat -i 2>/dev/null | grep 'Online Virtual CPUs' | awk '{print $NF}' || nproc 2>/dev/null || echo "Unknown")
    
    # Get uptime info
    UPTIME_INFO=$(uptime)
    
    echo "CURRENT_LOAD=$LOAD_AVG"
    echo "CPU_COUNT=$CPU_COUNT" 
    echo "UPTIME_INFO=$UPTIME_INFO"
  register: cpu_status
  changed_when: false
  tags:
    - cpu
    - monitoring

- name: Initialize CPU monitoring log
  ansible.builtin.raw: |
    LOG_FILE="/bigc/log/cpu_autojob_$(hostname)_$(date +%Y%m%d).log"
    echo "=============================== CPU AUTO-SCALING MONITORING ===============================" > "$LOG_FILE"
    echo "Date: $(date)" >> "$LOG_FILE"
    echo "Hostname: $(hostname)" >> "$LOG_FILE"
    echo "Change Ticket: AUTO" >> "$LOG_FILE"
    echo "Change Reason: Automated CPU scaling via AAP" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    echo "Current system status:" >> "$LOG_FILE"
    # Get current system info
    uptime >> "$LOG_FILE"
    LOAD=$(uptime | awk '{print $12}' | tr -d ',' 2>/dev/null || echo "0")
    CPU_COUNT=$(lparstat -i 2>/dev/null | grep 'Online Virtual CPUs' | awk '{print $NF}' || nproc 2>/dev/null || echo "Unknown")
    echo "Load Average: $LOAD" >> "$LOG_FILE"
    echo "Online Virtual CPUs: $CPU_COUNT" >> "$LOG_FILE"
    echo "Load Threshold: 5.0" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
  register: cpu_log_init
  changed_when: false
  tags:
    - cpu
    - logging

- name: Check if CPU scaling is needed and execute
  ansible.builtin.raw: |
    LOG_FILE="/bigc/log/cpu_autojob_$(hostname)_$(date +%Y%m%d).log"
    LOAD_THRESHOLD="5.0"
    HMC_HOST=""
    HMC_USER=""
    HMC_MANAGED_SYSTEM=""
    HMC_PARTITION_NAME=""
    CPU_INCREMENT="1"
    HMC_TIMEOUT="30"
    
    # Get current system load and CPU info
    CURRENT_LOAD=$(uptime | awk '{print $12}' | tr -d ',' 2>/dev/null || echo "0")
    CPU_BEFORE=$(lparstat -i 2>/dev/null | grep 'Online Virtual CPUs' | awk '{print $NF}' || nproc 2>/dev/null || echo "Unknown")
    
    echo "Checking if CPU scaling is needed..." >> "$LOG_FILE"
    echo "Current Load: $CURRENT_LOAD, Threshold: $LOAD_THRESHOLD" >> "$LOG_FILE"
    
    # Compare load with threshold (basic comparison)
    SCALE_NEEDED=0
    LOAD_INT=$(echo "$CURRENT_LOAD * 100" | awk '{print int($1)}' 2>/dev/null || echo 0)
    THRESHOLD_INT="500"  # 5.0 * 100
    [ "$LOAD_INT" -gt "$THRESHOLD_INT" ] && SCALE_NEEDED=1
    
    if [ "$SCALE_NEEDED" = "1" ]; then
      echo "CPU load $CURRENT_LOAD exceeds threshold $LOAD_THRESHOLD - would initiate scaling" >> "$LOG_FILE"
      echo "--- Show Virtual CPUs (before automatic add) ---" >> "$LOG_FILE"
      echo "Online Virtual CPUs: $CPU_BEFORE" >> "$LOG_FILE"
      echo "" >> "$LOG_FILE"
      
      # Simulate CPU scaling for validation
      echo "[SIMULATION] Would execute HMC command for CPU scaling" >> "$LOG_FILE"
      echo "[SIMULATION] HMC configuration not available in validation mode" >> "$LOG_FILE"
      echo "" >> "$LOG_FILE"
      echo "Recommended Action: This is a validation run - no actual scaling performed" >> "$LOG_FILE"
      echo "" >> "$LOG_FILE"
      echo "---------------------- By EIS Command Center ----------------------" >> "$LOG_FILE"
      
      echo "CPU_SCALED=NO"
    else
      echo "CPU load $CURRENT_LOAD within threshold $LOAD_THRESHOLD - no scaling needed" >> "$LOG_FILE"
      echo "CPU_SCALED=NO"
    fi
  register: cpu_scaling
  changed_when: false
  failed_when: false
  tags:
    - cpu
    - scaling

- name: Send email notification if CPU was scaled
  ansible.builtin.raw: |
    LOG_FILE="/bigc/log/cpu_autojob_$(hostname)_$(date +%Y%m%d).log"
    echo "Email notification skipped - validation mode" >> "$LOG_FILE"
  when: false
  failed_when: false
  tags:
    - cpu
    - notification

- name: Display CPU monitoring results
  ansible.builtin.raw: |
    echo "====================================="
    echo "CPU monitoring completed on $(hostname)"
    LOAD=$(uptime | awk '{print $12}' | tr -d ',' 2>/dev/null || echo "0")
    echo "Current Load: $LOAD"
    echo "Threshold: 5.0"
    echo "Log file: /bigc/log/cpu_autojob_$(hostname)_$(date +%Y%m%d).log"
    echo "====================================="
  tags:
    - cpu
    - results