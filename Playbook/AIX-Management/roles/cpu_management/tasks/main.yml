---
# Main tasks for CPU management using IBM Power AIX collection where possible

- name: Ensure log directory exists
  ansible.builtin.file:
    path: "{{ aix_log_dir }}"
    state: directory
    mode: '0755'
  tags:
    - cpu
    - setup

- name: Gather LPAR facts using IBM AIX module
  ibm.power_aix.lpar_facts:
  register: lpar_info
  tags:
    - cpu
    - facts

- name: Get current CPU load average
  ansible.builtin.shell: |
    uptime | awk '{print $10}' | cut -f 1 -d ','
  register: current_cpu_load
  changed_when: false
  tags:
    - cpu
    - monitoring

- name: Convert load average to integer for comparison
  ansible.builtin.set_fact:
    cpu_load_int: "{{ (current_cpu_load.stdout | float * 100) | int }}"
  tags:
    - cpu
    - monitoring

- name: Check if CPU load exceeds threshold
  ansible.builtin.set_fact:
    cpu_threshold_exceeded: "{{ cpu_load_int | int > (cpu_load_threshold * 100) | int }}"
  tags:
    - cpu
    - monitoring

- name: Display CPU status
  ansible.builtin.debug:
    msg: |
      Current CPU Load: {{ current_cpu_load.stdout }}
      Threshold: {{ cpu_load_threshold }}
      Threshold Exceeded: {{ cpu_threshold_exceeded }}
      Current Online Virtual CPUs: {{ lpar_info.ansible_facts.lpar_info.online_virtual_cpus | default('N/A') }}
  tags:
    - cpu
    - monitoring

- name: CPU auto-scaling block
  block:
    - name: Log CPU alert start
      ansible.builtin.template:
        src: cpu_alert_header.j2
        dest: "{{ cpu_autojob_log_file }}"
        mode: '0644'
    
    - name: Get current Virtual CPU count using IBM AIX module
      ansible.builtin.set_fact:
        cpu_count_before: "{{ lpar_info.ansible_facts.lpar_info.online_virtual_cpus | default('Unknown') }}"
    
    - name: Get current Virtual CPU count using lparstat (fallback)
      ansible.builtin.shell: |
        lparstat -i | grep 'Online Virtual CPUs' | awk '{print $NF}'
      register: cpu_count_before_fallback
      changed_when: false
      when: lpar_info.ansible_facts.lpar_info.online_virtual_cpus is not defined
    
    - name: Set CPU count before (using fallback if needed)
      ansible.builtin.set_fact:
        cpu_count_before: "{{ cpu_count_before_fallback.stdout if cpu_count_before_fallback.stdout is defined else cpu_count_before }}"
      when: cpu_count_before_fallback.stdout is defined
    
    - name: Log current system status
      ansible.builtin.lineinfile:
        path: "{{ cpu_autojob_log_file }}"
        line: |
          System uptime: {{ current_cpu_load.stdout }}
          --- Show Virtual CPUs (before automatic add) ---
          Online Virtual CPUs: {{ cpu_count_before }}
        mode: '0644'
    
    - name: Add virtual CPU via HMC
      ansible.builtin.shell: |
        ssh {{ hmc_user }}@{{ hmc_host }} "chhwres -r proc -m {{ hmc_managed_system }} -o a -p {{ hmc_partition_name }} --procs {{ cpu_increment_count }}"
      register: hmc_cpu_add_result
      timeout: "{{ hmc_timeout }}"
      ignore_errors: true
    
    - name: Wait for CPU addition to take effect
      ansible.builtin.pause:
        seconds: 5
      when: hmc_cpu_add_result.rc == 0
    
    - name: Refresh LPAR facts after CPU addition
      ibm.power_aix.lpar_facts:
      register: lpar_info_after
      when: hmc_cpu_add_result.rc == 0
    
    - name: Get current Virtual CPU count (after) using IBM AIX module
      ansible.builtin.set_fact:
        cpu_count_after: "{{ lpar_info_after.ansible_facts.lpar_info.online_virtual_cpus | default('Unknown') }}"
      when: 
        - hmc_cpu_add_result.rc == 0
        - lpar_info_after.ansible_facts.lpar_info.online_virtual_cpus is defined
    
    - name: Get current Virtual CPU count (after) using lparstat (fallback)
      ansible.builtin.shell: |
        lparstat -i | grep 'Online Virtual CPUs' | awk '{print $NF}'
      register: cpu_count_after_fallback
      changed_when: false
      when: 
        - hmc_cpu_add_result.rc == 0
        - (cpu_count_after is not defined or cpu_count_after == 'Unknown')
    
    - name: Set CPU count after (using fallback if needed)
      ansible.builtin.set_fact:
        cpu_count_after: "{{ cpu_count_after_fallback.stdout if cpu_count_after_fallback.stdout is defined else cpu_count_after | default('Unknown') }}"
      when: 
        - hmc_cpu_add_result.rc == 0
        - cpu_count_after_fallback.stdout is defined
    
    - name: Get updated system load
      ansible.builtin.shell: |
        uptime
      register: uptime_after
      changed_when: false
      when: hmc_cpu_add_result.rc == 0
    
    - name: Log successful CPU addition
      ansible.builtin.lineinfile:
        path: "{{ cpu_autojob_log_file }}"
        line: |
          
          {{ ansible_date_time.iso8601 }}
          System uptime: {{ uptime_after.stdout }}
          --- Show Virtual CPUs (after automatic add) ---
          Online Virtual CPUs: {{ cpu_count_after }}
          
          Recommended Action: No response action is required.
          
          ---------------------- By EIS Command Center ----------------------
        mode: '0644'
      when: hmc_cpu_add_result.rc == 0
    
    - name: Send success notification email
      community.general.mail:
        host: "{{ smtp_host }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_user }}"
        password: "{{ smtp_pass }}"
        to: "{{ alert_emails }}"
        subject: "{{ cpu_success_subject }}"
        body: "{{ lookup('file', cpu_autojob_log_file) }}"
      when: 
        - hmc_cpu_add_result.rc == 0
        - alert_emails is defined
    
    - name: Handle CPU addition failure
      block:
        - name: Log CPU addition failure
          ansible.builtin.lineinfile:
            path: "{{ cpu_autojob_log_file }}"
            line: |
              
              --- CPU Addition Failed ---
              Error: Unable to add virtual CPU via HMC
              HMC Command: ssh {{ hmc_user }}@{{ hmc_host }} "chhwres -r proc -m {{ hmc_managed_system }} -o a -p {{ hmc_partition_name }} --procs {{ cpu_increment_count }}"
              Error Output: {{ hmc_cpu_add_result.stderr | default('No error details available') }}
              Current Virtual CPUs: {{ cpu_count_before }}
              
              Recommended Action: Please call EIS Unix-Linux Admin Team for review
              
              ---------------------- By EIS Command Center ----------------------
            mode: '0644'
        
        - name: Send failure notification email
          community.general.mail:
            host: "{{ smtp_host }}"
            port: "{{ smtp_port }}"
            username: "{{ smtp_user }}"
            password: "{{ smtp_pass }}"
            to: "{{ alert_emails }}"
            subject: "EIS Command Center (Unix-Linux Team): FAILED - CPU auto-scaling failed on {{ ansible_hostname }}"
            body: "{{ lookup('file', cpu_autojob_log_file) }}"
          when: alert_emails is defined
      
      when: hmc_cpu_add_result.rc != 0
  
  when: 
    - cpu_threshold_exceeded | bool
    - cpu_auto_scaling_enabled | bool
  tags:
    - cpu
    - autoscaling

- name: Log load average for monitoring
  ansible.builtin.lineinfile:
    path: "{{ cpu_load_log_file }}"
    line: "{{ ansible_date_time.date }} - {{ ansible_date_time.time }}\tLoad Average {{ current_cpu_load.stdout }}"
    create: true
    mode: '0644'
  when: cpu_threshold_exceeded | bool
  tags:
    - cpu
    - logging