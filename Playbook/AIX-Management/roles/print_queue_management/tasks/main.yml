---
# Main tasks for print queue management using direct SSH commands

- name: Ensure log directory exists
  ansible.builtin.raw: |
    [ -d "{{ aix_log_dir }}" ] || mkdir -p "{{ aix_log_dir }}"
    chmod 755 "{{ aix_log_dir }}"
  changed_when: false
  tags:
    - print_queue
    - setup

- name: Check spooler service group status
  ansible.builtin.raw: |
    # Check if spooler service group has inoperative services
    if lssrc -g spooler 2>/dev/null | grep -q inoperative; then
      echo "SPOOLER_INOPERATIVE=YES"
      lssrc -g spooler
    else
      echo "SPOOLER_INOPERATIVE=NO"
    fi
  register: spooler_check
  changed_when: false
  tags:
    - print_queue
    - spooler

- name: Initialize print queue monitoring log
  ansible.builtin.raw: |
    LOG_FILE="{{ aix_log_dir }}/print_queue_$(hostname)_$(date +%Y%m%d).log"
    SPOOLER_LOG="{{ aix_log_dir }}/spooler_$(hostname)_$(date +%Y%m%d).log"
    
    echo "=============================== PRINT QUEUE MONITORING ===============================" > "$LOG_FILE"
    echo "Date: $(date)" >> "$LOG_FILE"
    echo "Hostname: $(hostname)" >> "$LOG_FILE"
    echo "Change Ticket: {{ change_ticket | default('AUTO') }}" >> "$LOG_FILE"
    echo "Change Reason: {{ change_reason | default('Automated print queue management via AAP') }}" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    echo "Current print queue status:" >> "$LOG_FILE"
    lpstat -a >> "$LOG_FILE" 2>/dev/null || echo "No print queues found" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
  register: print_queue_log_init
  changed_when: false
  tags:
    - print_queue
    - logging

- name: Restart spooler service group if inoperative
  ansible.builtin.raw: |
    SPOOLER_LOG="{{ aix_log_dir }}/spooler_$(hostname)_$(date +%Y%m%d).log"
    SPOOLER_RESTARTED=NO
    
    if echo "{{ spooler_check.stdout }}" | grep -q "SPOOLER_INOPERATIVE=YES"; then
      echo "=============================== SPOOLER SERVICE RESTART ===============================" > "$SPOOLER_LOG"
      echo "Date: $(date)" >> "$SPOOLER_LOG"
      echo "Hostname: $(hostname)" >> "$SPOOLER_LOG"
      echo "Change Ticket: {{ change_ticket | default('AUTO') }}" >> "$SPOOLER_LOG"
      echo "Change Reason: {{ change_reason | default('Automated spooler restart via AAP') }}" >> "$SPOOLER_LOG"
      echo "" >> "$SPOOLER_LOG"
      
      echo "Spooler status before restart:" >> "$SPOOLER_LOG"
      lssrc -g spooler >> "$SPOOLER_LOG" 2>/dev/null
      echo "" >> "$SPOOLER_LOG"
      
      # Restart spooler service group
      echo "Restarting spooler service group..." >> "$SPOOLER_LOG"
      if startsrc -g spooler >> "$SPOOLER_LOG" 2>&1; then
        echo "Spooler restart command executed" >> "$SPOOLER_LOG"
        
        # Wait for restart
        sleep {{ spooler_restart_wait_time | default(10) }}
        
        # Check post-restart status
        echo "$(date)" >> "$SPOOLER_LOG"
        echo "Spooler status after restart:" >> "$SPOOLER_LOG"
        lssrc -g spooler >> "$SPOOLER_LOG" 2>/dev/null
        echo "" >> "$SPOOLER_LOG"
        echo "Recommended Action: If status: running, No response action is required." >> "$SPOOLER_LOG"
        echo "Recommended Action: If status: inoperative, Please call to EIS Unix-Linux Admin Team for review" >> "$SPOOLER_LOG"
        echo "" >> "$SPOOLER_LOG"
        echo "---------------------- By EIS Command Center ----------------------" >> "$SPOOLER_LOG"
        
        SPOOLER_RESTARTED=YES
      else
        echo "Failed to restart spooler service group" >> "$SPOOLER_LOG"
        echo "---------------------- By EIS Command Center ----------------------" >> "$SPOOLER_LOG"
      fi
    fi
    
    echo "SPOOLER_RESTARTED=$SPOOLER_RESTARTED"
  register: spooler_restart
  changed_when: "'SPOOLER_RESTARTED=YES' in spooler_restart.stdout"
  failed_when: false
  tags:
    - print_queue
    - spooler

- name: Check individual print queue status and restart if needed
  ansible.builtin.raw: |
    LOG_FILE="{{ aix_log_dir }}/print_queue_$(hostname)_$(date +%Y%m%d).log"
    PRINT_QUEUES="{{ print_queues_to_monitor | default([]) | join(' ') }}"
    QUEUES_RESTARTED=0
    DATE_SUFFIX=$(date +%Y%m%d)
    
    if [ -n "$PRINT_QUEUES" ]; then
      echo "Checking individual print queues: $PRINT_QUEUES" >> "$LOG_FILE"
      
      for queue in $PRINT_QUEUES; do
        echo "Checking queue: $queue" >> "$LOG_FILE"
        
        # Check if queue is DOWN
        if lpstat -p"$queue" 2>/dev/null | grep -q DOWN; then
          echo "Found queue $queue was DOWN" >> "$LOG_FILE"
          
          # Create error log for this queue
          ERROR_LOG="{{ aix_log_dir }}/print_queue_error_$(hostname)_${DATE_SUFFIX}.down"
          echo "Found queue $queue was down then" > "$ERROR_LOG"
          lpstat -W -p"$queue" >> "$ERROR_LOG" 2>/dev/null
          echo "" >> "$ERROR_LOG"
          
          # Disable and re-enable the queue
          echo "Restarting queue $queue..." >> "$LOG_FILE"
          if disable "$queue" && enable "$queue"; then
            echo "Successfully restarted queue $queue" >> "$LOG_FILE"
            QUEUES_RESTARTED=$((QUEUES_RESTARTED + 1))
            
            # Wait for queue to come up
            sleep {{ queue_restart_wait_time | default(5) }}
            
            # Complete error log
            echo "" >> "$ERROR_LOG"
            echo "---------------------- By EIS Command Center ----------------------" >> "$ERROR_LOG"
            echo "First action by auto disable and enable on OFI" >> "$ERROR_LOG"
          else
            echo "Failed to restart queue $queue" >> "$LOG_FILE"
          fi
        else
          echo "Queue $queue status is OK" >> "$LOG_FILE"
        fi
      done
      
      # Add post-restart status if any queues were restarted
      if [ "$QUEUES_RESTARTED" -gt 0 ]; then
        echo "" >> "$LOG_FILE"
        echo "=============================== POST AUTO TASKS STATUS ===============================" >> "$LOG_FILE"
        echo "$(date)" >> "$LOG_FILE"
        lpstat -a >> "$LOG_FILE" 2>/dev/null
        echo "" >> "$LOG_FILE"
        echo "Recommended Action: If status: READY/RUNNING, No response action is required." >> "$LOG_FILE"
        echo "Recommended Action: If status: DOWN, Please call to EIS Unix-Linux Admin Team for review" >> "$LOG_FILE"
        echo "" >> "$LOG_FILE"
        echo "---------------------- By EIS Command Center ----------------------" >> "$LOG_FILE"
      fi
    else
      echo "No print queues specified for monitoring" >> "$LOG_FILE"
    fi
    
    echo "QUEUES_RESTARTED=$QUEUES_RESTARTED"
  register: queue_restart
  changed_when: "'QUEUES_RESTARTED=' in queue_restart.stdout and queue_restart.stdout.split('QUEUES_RESTARTED=')[1].split()[0] != '0'"
  failed_when: false
  tags:
    - print_queue
    - queues

- name: Send email notifications
  ansible.builtin.raw: |
    if [ -n "{{ alert_emails | default('') }}" ] && [ -n "{{ smtp_host | default('') }}" ]; then
      HOSTNAME=$(hostname)
      
      # Send spooler notification if restarted
      {% if spooler_restart.changed %}
      if command -v mail >/dev/null 2>&1; then
        mail -s "EIS Command Center (Unix-Linux Team): Spooler service restarted on $HOSTNAME" "{{ alert_emails | join(',') }}" < "{{ aix_log_dir }}/spooler_${HOSTNAME}_$(date +%Y%m%d).log" 2>/dev/null || echo "Failed to send spooler email"
      fi
      {% endif %}
      
      # Send queue notifications if any were restarted
      {% if queue_restart.changed %}
      if command -v mail >/dev/null 2>&1; then
        mail -s "EIS Command Center (Unix-Linux Team): Print queue management completed on $HOSTNAME" "{{ alert_emails | join(',') }}" < "{{ aix_log_dir }}/print_queue_${HOSTNAME}_$(date +%Y%m%d).log" 2>/dev/null || echo "Failed to send queue email"
      fi
      {% endif %}
    fi
  when: spooler_restart.changed or queue_restart.changed
  failed_when: false
  tags:
    - print_queue
    - notification

- name: Display print queue monitoring results
  ansible.builtin.debug:
    msg: |
      Print queue monitoring completed on {{ ansible_hostname }}
      {% if spooler_restart.changed %}
      Spooler service: Restarted
      {% else %}
      Spooler service: No restart needed
      {% endif %}
      {% if queue_restart.changed %}
      Print queues restarted: {{ queue_restart.stdout.split('QUEUES_RESTARTED=')[1].split()[0] if 'QUEUES_RESTARTED=' in queue_restart.stdout else '0' }}
      {% else %}
      Print queues: No restarts needed
      {% endif %}
      Log file: {{ aix_log_dir }}/print_queue_$(hostname)_$(date +%Y%m%d).log
  tags:
    - print_queue
    - results