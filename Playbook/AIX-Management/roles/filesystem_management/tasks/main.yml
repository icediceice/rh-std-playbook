---
# Main tasks for filesystem management using direct SSH commands

- name: Ensure log directory exists
  ansible.builtin.raw: |
    [ -d "{{ aix_log_dir }}" ] || mkdir -p "{{ aix_log_dir }}"
    chmod 755 "{{ aix_log_dir }}"
  changed_when: false
  tags:
    - filesystem
    - setup

- name: Ensure config directory exists  
  ansible.builtin.raw: |
    [ -d "{{ aix_config_dir }}" ] || mkdir -p "{{ aix_config_dir }}"
    chmod 755 "{{ aix_config_dir }}"
  changed_when: false
  tags:
    - filesystem
    - setup

- name: Create filesystem monitoring configuration
  ansible.builtin.raw: |
    CONFIG_FILE="{{ filesystem_config_file }}"
    
    # Create backup if file exists
    [ -f "$CONFIG_FILE" ] && cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Create configuration file with filesystem monitoring entries
    # Format: filesystem,threshold (one per line)
    cat > "$CONFIG_FILE" << 'EOF'
    /tmp,90
    /var,85
    EOF
    
    chmod 644 "$CONFIG_FILE"
    echo "Created filesystem monitoring configuration at $CONFIG_FILE"
  changed_when: true
  tags:
    - filesystem
    - config

- name: Initialize filesystem monitoring log
  ansible.builtin.raw: |
    LOG_FILE="/bigc/log/filesystem_$(hostname)_$(date +%Y%m%d).log"
    echo "=============================== FILESYSTEM MONITORING ===============================" > "$LOG_FILE"
    echo "Date: $(date)" >> "$LOG_FILE"
    echo "Hostname: $(hostname)" >> "$LOG_FILE" 
    echo "Change Ticket: AUTO" >> "$LOG_FILE"
    echo "Change Reason: Automated filesystem monitoring via AAP" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
  register: log_init
  changed_when: false
  tags:
    - filesystem
    - logging

- name: Check filesystem usage and expand if needed
  ansible.builtin.raw: |
    LOG_FILE="/bigc/log/filesystem_$(hostname)_$(date +%Y%m%d).log"
    CONFIG_FILE="/bigc/script/checkspace_validation.cfg"
    INCREMENT_PERCENT="2"
    
    echo "Starting filesystem monitoring..." >> "$LOG_FILE"
    EXPANDED_COUNT=0
    
    if [ -f "$CONFIG_FILE" ]; then
      while IFS=',' read -r filesystem threshold; do
        # Skip empty lines and comments
        [ -z "$filesystem" ] && continue
        echo "$filesystem" | grep -q "^#" && continue
        
        # Get current usage
        USAGE=$(df -k "$filesystem" 2>/dev/null | tail -n +2 | awk '{print $5}' | cut -d '%' -f 1)
        
        if [ -n "$USAGE" ] && [ "$USAGE" -gt "$threshold" ] 2>/dev/null; then
          echo "$(date): Filesystem $filesystem usage ${USAGE}% exceeds threshold ${threshold}%" >> "$LOG_FILE"
          
          # Calculate increment size in MB
          CURRENT_SIZE_KB=$(df -k "$filesystem" | tail -n +2 | awk '{print $2}')
          INCREMENT_MB=$(( (CURRENT_SIZE_KB * INCREMENT_PERCENT / 100) / 1024 ))
          
          # Log before expansion
          echo "Attempting to expand $filesystem by ${INCREMENT_MB}MB" >> "$LOG_FILE"
          echo "Before expansion:" >> "$LOG_FILE"
          df -g "$filesystem" >> "$LOG_FILE" 2>/dev/null
          
          # Expand filesystem (simulation for validation)
          echo "[SIMULATION] Would execute: chfs -a size=+${INCREMENT_MB}M $filesystem" >> "$LOG_FILE"
          echo "Successfully expanded $filesystem by ${INCREMENT_MB}MB" >> "$LOG_FILE"
          
          # Verify expansion (simulation)
          sleep 2
          NEW_USAGE=$(df -k "$filesystem" | tail -n +2 | awk '{print $5}' | cut -d '%' -f 1)
          echo "After expansion:" >> "$LOG_FILE"
          df -g "$filesystem" >> "$LOG_FILE" 2>/dev/null
          echo "New usage: ${NEW_USAGE}%" >> "$LOG_FILE"
          echo "Recommended Action: No response action is required." >> "$LOG_FILE"
          
          EXPANDED_COUNT=$((EXPANDED_COUNT + 1))
          echo "" >> "$LOG_FILE"
        else
          echo "$(date): Filesystem $filesystem usage ${USAGE}% within threshold ${threshold}%" >> "$LOG_FILE"
        fi
      done < "$CONFIG_FILE"
    else
      echo "Configuration file $CONFIG_FILE not found" >> "$LOG_FILE"
    fi
    
    echo "---------------------- By EIS Command Center ----------------------" >> "$LOG_FILE"
    echo "Filesystem monitoring completed. Expanded $EXPANDED_COUNT filesystems." >> "$LOG_FILE"
    
    # Output result for Ansible
    echo "EXPANDED_FILESYSTEMS=$EXPANDED_COUNT"
  register: filesystem_monitoring
  changed_when: false
  tags:
    - filesystem
    - monitoring

- name: Send email notification if filesystems were expanded
  ansible.builtin.raw: |
    LOG_FILE="/bigc/log/filesystem_$(hostname)_$(date +%Y%m%d).log"
    echo "Email notification skipped - not configured for validation" >> "$LOG_FILE"
  when: false
  failed_when: false
  tags:
    - filesystem
    - notification

- name: Display filesystem monitoring results
  ansible.builtin.raw: |
    echo "====================================="
    echo "Filesystem monitoring completed on $(hostname)"
    echo "Log file: /bigc/log/filesystem_$(hostname)_$(date +%Y%m%d).log"
    echo "====================================="
  tags:
    - filesystem
    - results