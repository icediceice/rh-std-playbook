---
# Main tasks for filesystem management using direct SSH commands

- name: Ensure log directory exists
  ansible.builtin.raw: |
    [ -d "{{ aix_log_dir }}" ] || mkdir -p "{{ aix_log_dir }}"
    chmod 755 "{{ aix_log_dir }}"
  changed_when: false
  tags:
    - filesystem
    - setup

- name: Ensure config directory exists  
  ansible.builtin.raw: |
    [ -d "{{ aix_config_dir }}" ] || mkdir -p "{{ aix_config_dir }}"
    chmod 755 "{{ aix_config_dir }}"
  changed_when: false
  tags:
    - filesystem
    - setup

- name: Create filesystem monitoring configuration
  ansible.builtin.raw: |
    CONFIG_FILE="{{ filesystem_config_file }}"
    
    # Create backup if file exists
    [ -f "$CONFIG_FILE" ] && cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Create configuration file with filesystem monitoring entries
    # Format: filesystem,threshold (one per line)
    cat > "$CONFIG_FILE" << 'EOF'
    /tmp,90
    /var,85
    EOF
    
    chmod 644 "$CONFIG_FILE"
    echo "Created filesystem monitoring configuration at $CONFIG_FILE"
  changed_when: true
  tags:
    - filesystem
    - config

- name: Initialize filesystem monitoring log
  ansible.builtin.raw: |
    LOG_FILE="{{ aix_log_dir }}/filesystem_$(hostname)_$(date +%Y%m%d).log"
    echo "=============================== FILESYSTEM MONITORING ===============================" > "$LOG_FILE"
    echo "Date: $(date)" >> "$LOG_FILE"
    echo "Hostname: $(hostname)" >> "$LOG_FILE" 
    echo "Change Ticket: {{ change_ticket | default('AUTO') }}" >> "$LOG_FILE"
    echo "Change Reason: {{ change_reason | default('Automated filesystem monitoring via AAP') }}" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
  register: log_init
  changed_when: false
  tags:
    - filesystem
    - logging

- name: Check filesystem usage and expand if needed
  ansible.builtin.raw: |
    LOG_FILE="{{ aix_log_dir }}/filesystem_$(hostname)_$(date +%Y%m%d).log"
    CONFIG_FILE="{{ filesystem_config_file }}"
    INCREMENT_PERCENT="{{ filesystem_increment_percent | default(2) }}"
    
    echo "Starting filesystem monitoring..." >> "$LOG_FILE"
    EXPANDED_COUNT=0
    
    if [ -f "$CONFIG_FILE" ]; then
      while read filesystem threshold; do
        # Skip empty lines and comments
        [ -z "$filesystem" ] && continue
        echo "$filesystem" | grep -q "^#" && continue
        
        # Get current usage
        USAGE=$(df -kI "$filesystem" 2>/dev/null | tail -n +2 | awk '{print $5}' | cut -d '%' -f 1)
        
        if [ -n "$USAGE" ] && [ "$USAGE" -gt "$threshold" ]; then
          echo "$(date): Filesystem $filesystem usage ${USAGE}% exceeds threshold ${threshold}%" >> "$LOG_FILE"
          
          # Calculate increment size in MB
          CURRENT_SIZE_KB=$(df -kI "$filesystem" | tail -n +2 | awk '{print $2}')
          INCREMENT_MB=$(( (CURRENT_SIZE_KB * INCREMENT_PERCENT / 100) / 1024 ))
          
          # Log before expansion
          echo "Attempting to expand $filesystem by ${INCREMENT_MB}MB" >> "$LOG_FILE"
          echo "Before expansion:" >> "$LOG_FILE"
          df -Ig "$filesystem" >> "$LOG_FILE"
          
          # Expand filesystem
          if chfs -a size=+${INCREMENT_MB}M "$filesystem" 2>&1 >> "$LOG_FILE"; then
            echo "Successfully expanded $filesystem by ${INCREMENT_MB}MB" >> "$LOG_FILE"
            
            # Verify expansion
            sleep 2
            NEW_USAGE=$(df -kI "$filesystem" | tail -n +2 | awk '{print $5}' | cut -d '%' -f 1)
            echo "After expansion:" >> "$LOG_FILE"
            df -Ig "$filesystem" >> "$LOG_FILE"
            echo "New usage: ${NEW_USAGE}%" >> "$LOG_FILE"
            echo "Recommended Action: No response action is required." >> "$LOG_FILE"
            
            EXPANDED_COUNT=$((EXPANDED_COUNT + 1))
          else
            echo "Failed to expand $filesystem" >> "$LOG_FILE"
            echo "Recommended Action: Please call EIS Unix-Linux Admin Team for review" >> "$LOG_FILE"
          fi
          echo "" >> "$LOG_FILE"
        else
          echo "$(date): Filesystem $filesystem usage ${USAGE}% within threshold ${threshold}%" >> "$LOG_FILE"
        fi
      done < "$CONFIG_FILE"
    else
      echo "Configuration file $CONFIG_FILE not found" >> "$LOG_FILE"
    fi
    
    echo "---------------------- By EIS Command Center ----------------------" >> "$LOG_FILE"
    echo "Filesystem monitoring completed. Expanded $EXPANDED_COUNT filesystems." >> "$LOG_FILE"
    
    # Output result for Ansible
    echo "EXPANDED_FILESYSTEMS=$EXPANDED_COUNT"
  register: filesystem_monitoring
  changed_when: "'EXPANDED_FILESYSTEMS=' in filesystem_monitoring.stdout and filesystem_monitoring.stdout.split('EXPANDED_FILESYSTEMS=')[1].split()[0] != '0'"
  tags:
    - filesystem
    - monitoring

- name: Send email notification if filesystems were expanded
  ansible.builtin.raw: |
    LOG_FILE="{{ aix_log_dir }}/filesystem_$(hostname)_$(date +%Y%m%d).log"
    
    if [ -n "{{ alert_emails | default('') }}" ] && [ -n "{{ smtp_host | default('') }}" ]; then
      SUBJECT="EIS Command Center (Unix-Linux Team): Filesystem monitoring completed on $(hostname)"
      
      # Send email (basic implementation)
      if command -v mail >/dev/null 2>&1; then
        mail -s "$SUBJECT" "{{ alert_emails | join(',') }}" < "$LOG_FILE" 2>/dev/null || echo "Failed to send email notification" >> "$LOG_FILE"
      else
        echo "Mail command not available - skipping email notification" >> "$LOG_FILE"
      fi
    fi
  when: filesystem_monitoring.changed
  failed_when: false
  tags:
    - filesystem
    - notification

- name: Display filesystem monitoring results
  ansible.builtin.debug:
    msg: |
      Filesystem monitoring completed on {{ ansible_hostname }}
      {% if filesystem_monitoring.changed %}
      Filesystems expanded: {{ filesystem_monitoring.stdout.split('EXPANDED_FILESYSTEMS=')[1].split()[0] if 'EXPANDED_FILESYSTEMS=' in filesystem_monitoring.stdout else '0' }}
      {% else %}
      No filesystems required expansion
      {% endif %}
      Log file: {{ aix_log_dir }}/filesystem_$(hostname)_$(date +%Y%m%d).log
  tags:
    - filesystem
    - results